// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from BlockTemplate.tt/>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using Eco.Gameplay.Blocks;
using Eco.Gameplay.Components;
using Eco.Gameplay.DynamicValues;
using Eco.Gameplay.Items;
using Eco.Gameplay.Objects;
using Eco.Gameplay.Players;
using Eco.Gameplay.Skills;
using Eco.Gameplay.Systems;
using Eco.Gameplay.Systems.TextLinks;
using Eco.Core.Items;
using Eco.Shared.Localization;
using Eco.Shared.Serialization;
using Eco.Shared.Utils;
using Eco.Shared.SharedTypes;
using Eco.World;
using Eco.World.Blocks;
using Eco.World.Water;
using Eco.Gameplay.Pipes;
using Eco.Core.Controller;
using Eco.Gameplay.Items.Recipes;

namespace Eco.Mods.TechTree
{
    [RequiresSkill(typeof(MasonrySkill), 2)]
    [ForceCreateView]
    [Ecopedia("Blocks", "Building Materials", subPageName: "Mortared Slate Item")]
    public partial class MortaredSlateRecipe : Recipe
    {
        public MortaredSlateRecipe()
        {
            this.Init(
                name: "MortaredSlate",  //noloc
                displayName: Localizer.DoStr("Mortared Slate"),

                // Defines the ingredients needed to craft this recipe. An ingredient items takes the following inputs
                // type of the item, the amount of the item, the skill required, and the talent used.
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(SlateItem), 4, typeof(MasonrySkill), typeof(MasonryLavishResourcesTalent)),
                    new IngredientElement(typeof(MortarItem), 1, typeof(MasonrySkill), typeof(MasonryLavishResourcesTalent)),
                },

                // Define our recipe output items.
                // For every output item there needs to be one CraftingElement entry with the type of the final item and the amount
                // to create.
                items: new List<CraftingElement>
                {
                    new CraftingElement<MortaredSlateItem>()
                });
            // Perform post initialization steps for user mods and initialize our recipe instance as a tag product with the crafting system
            this.ModsPostInitialize();
            CraftingComponent.AddTagProduct(typeof(MasonryTableObject), typeof(MortaredStoneRecipe), this);
        }


        /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
        partial void ModsPostInitialize();
    }

    [Serialized]
    [Solid, Wall, Constructed, BuildRoomMaterialOption]
    [BlockTier(1)]
    [RequiresSkill(typeof(MasonrySkill), 2)]
    public partial class MortaredSlateBlock :
        Block
        , IRepresentsItem
    {
        public virtual Type RepresentedItemType { get { return typeof(MortaredSlateItem); } }
    }

    [Serialized]
    [LocDisplayName("Mortared Slate")]
    [LocDescription("Used to create tough but rudimentary buildings.")]
    [MaxStackSize(15)]
    [Weight(10000)]
    [Ecopedia("Blocks", "Building Materials", createAsSubPage: true)]
    [Tag("MortaredStone")]
    [Tag("Constructable")]
    [Tier(1)]
    public partial class MortaredSlateItem :

    BlockItem<MortaredSlateBlock>
    {
        public override LocString DisplayNamePlural { get { return Localizer.DoStr("Mortared Slate"); } }

        public override bool CanStickToWalls { get { return false; } }

        private static Type[] blockTypes = new Type[] {
            typeof(MortaredSlateStacked1Block),
            typeof(MortaredSlateStacked2Block),
            typeof(MortaredSlateStacked3Block)
        };

        public override Type[] BlockTypes { get { return blockTypes; } }
    }

    [Tag("MortaredStone")]
    [Tag("Constructable")]
    [Tag(BlockTags.PartialStack)]
    [Serialized, Solid] public class MortaredSlateStacked1Block : PickupableBlock, IWaterLoggedBlock { }
    [Tag("MortaredStone")]
    [Tag("Constructable")]
    [Tag(BlockTags.PartialStack)]
    [Serialized, Solid] public class MortaredSlateStacked2Block : PickupableBlock, IWaterLoggedBlock { }
    [Tag("MortaredStone")]
    [Tag("Constructable")]
    [Tag(BlockTags.FullStack)]
    [Serialized, Solid, Wall] public class MortaredSlateStacked3Block : PickupableBlock, IWaterLoggedBlock { } //Only a wall if it's all 4 MortaredSlate
}
